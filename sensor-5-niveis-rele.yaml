substitutions:
  name: "sensor-5n-cr-v1"
  friendly_name: "Sensor 5 Niveis-CR-v1"
  room: ""
  device_description: "Sensor de 5 Niveis com relê"
  project_name: "Automakaza.Sensor 5 Niveis CR-v1"
  project_version: "1.01"
  relay_restore_mode: RESTORE_DEFAULT_OFF

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
#  encryption:
#    key: "QDI87eT77FyPKX9ptb+0Y+ikRyUAUmcvi1QOuxb4348="

ota:
#  password: "e2c5a69d65a4cc0e269a10738d3ae83c"

wifi:
  ap: {}
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password

# ativa um hotspot (captive portal) caso a conexão wifi falhe
captive_portal:

dashboard_import:
  package_import_url: github://automakaza/esp-configs/sensor-5-niveis-rele.yaml

# Ativa um webserver com todos os recursos instalados.
web_server:
  port: 80
  local: True
  version: 2
  ota: True

select:
  - platform: template
    name: Liga Relé em
    id: rele_on
    options:
     - "0 %"
     - "20 %"
     - "40 %"
     - "60 %"
     - "80 %"
     - "100 %"
#    initial_option: "0 %"
    restore_value: True
    optimistic: True

  - platform: template
    name: Desliga Relé em
    id: rele_off
    options:
     - "0 %"
     - "20 %"
     - "40 %"
     - "60 %"
     - "80 %"
     - "100 %"
#    initial_option: "80 %"
    restore_value: True
    optimistic: True

output:
  - platform: gpio
    pin: 16
    id: led_20
  - platform: gpio
    pin: 17
    id: led_40
  - platform: gpio
    pin: 5
    id: led_60
  - platform: gpio
    pin: 18
    id: led_80
  - platform: gpio
    pin: 19
    id: led_100

  - platform: ledc
    pin: 21
    id: led_erro
    #frequency: 1000

light:
  - platform: binary
    output: led_20
    id: nivel_20   
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    output: led_40
    id: nivel_40
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    output: led_60
    id: nivel_60     
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    output: led_80
    id: nivel_80
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    output: led_100
    id: nivel_100
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: monochromatic
    output: led_erro
    id: nivel_erro
    effects:
      - pulse:
          transition_length: 1s
          update_interval: 3s
          min_brightness: 0%
          max_brightness: 100%

  - platform: status_led
    pin: 2 #pino do led azul na placa do ESP32
    id: led_conectado_ha

switch:
  - platform: gpio
    pin: 23
    name: "Relé 10A"
    id: rele10a

binary_sensor:
  - platform: status
    id: ha_conectado
    name: "[ Status Servidor"
    on_state:
      then:
        - if:
            condition:
              binary_sensor.is_on: ha_conectado
            then:
              #- light.turn_on: led_on_ha
              - logger.log: 
                  format: "Servidor HA CONECTADO"
                  level: INFO

            else:
              #- light.turn_off: led_on_ha
              - logger.log: 
                  format: "Servidor HA DESCONECTADO"
                  level: WARN


############ Sensor 1 - 20% ##############
  - platform: gpio
    id: sensor20
    filters:
      - delayed_on: 500ms
      - delayed_off: 5000ms
    publish_initial_state: True
    pin:
      number: 13
      mode: INPUT_PULLUP
      inverted: False
    on_press:
      then:
        - light.turn_off: nivel_20
        - logger.log: 
            format: "SENSOR 1 - Desativado"
            level: INFO
    on_release:
      then:
        - light.turn_on: nivel_20
        - logger.log: 
            format: "SENSOR 1 - ATIVADO"
            level: INFO

############ Sensor 2 - 40% ##############
  - platform: gpio
    id: sensor40
    filters:
      - delayed_on: 500ms
      - delayed_off: 5000ms
    pin:
      number: 25
      mode: INPUT_PULLUP
      inverted: False
    # aciona com o estado da porta: Ligada = Liga, Desligada: Desliga
    on_press:
      then:
        - light.turn_off: nivel_40
        - logger.log: 
            format: "SENSOR 2 - Desativado"
            level: INFO
    on_release:
      then:
        - light.turn_on: nivel_40
        - logger.log: 
            format: "SENSOR 2 - ATIVADO"
            level: INFO

############ Sensor 3 - 60% ##############
  - platform: gpio
    id: sensor60
    filters:
      - delayed_on: 500ms
      - delayed_off: 5000ms
    pin:
      number: 14
      mode: INPUT_PULLUP
      inverted: False
    # aciona com o estado da porta: Ligada = Liga, Desligada: Desliga
    on_press:
      then:
        - light.turn_off: nivel_60
        - logger.log: 
            format: "SENSOR 3 - Desativado"
            level: INFO
    on_release:
      then:
        - light.turn_on: nivel_60
        - logger.log: 
            format: "SENSOR 3 - ATIVADO"
            level: INFO

############ Sensor 4 - 80% ##############
  - platform: gpio
    id: sensor80
    filters:
      - delayed_on: 500ms
      - delayed_off: 5000ms
    pin:
      number: 27
      mode: INPUT_PULLUP
      inverted: False
    # aciona com o estado da porta: Ligada = Liga, Desligada: Desliga
    on_press:
      then:
        - light.turn_off: nivel_80
        - logger.log: 
            format: "SENSOR 4 - Desativado"
            level: INFO
    on_release:
      then:
        - light.turn_on: nivel_80
        - logger.log: 
            format: "SENSOR 4 - ATIVADO"
            level: INFO

############ Sensor 5 - 100% ##############
  - platform: gpio
    id: sensor100
    filters:
      - delayed_on: 500ms
      - delayed_off: 5000ms
    pin:
      number: 26
      mode: INPUT_PULLUP
      inverted: False
    # aciona com o estado da porta: Ligada = Liga, Desligada: Desliga
    on_press:
      then:
        - light.turn_off: nivel_100
        - logger.log: 
            format: "SENSOR 5 - Desativado"
            level: INFO
    on_release:
      then:
        - light.turn_on: nivel_100
        - logger.log: 
            format: "SENSOR 5 - ATIVADO"
            level: INFO

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "[ Endereço IP"
      icon: mdi:ip
    ssid:
      name: "[ Conectado ao SSID"
      icon: mdi:wifi
    mac_address:
      name: "[ Endereço MAC"
      icon: mdi:identifier

  - platform: template
    name: "[ Uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[32];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    entity_category: "diagnostic"
    update_interval: 15s

# Verifica Status de erro nos sensores
  - platform: template
    name: "Status dos Sensores"
    id: falha_sensor
    update_interval: 5s
    lambda: |-
      if (!id(sensor100).state) {
        if (!id(sensor80).state) {
          if (!id(sensor60).state) {
            if (!id(sensor40).state) {
              if (!id(sensor20).state) {
                 return {"OK"};
              }
              else {return {"FALHA"};}
            } 
            else {return {"FALHA"};}
          }
          else {return {"FALHA"};}
        }
        else {return {"FALHA"};}
      }
      else {
        if (!id(sensor80).state) {
          if (!id(sensor60).state) {
            if (!id(sensor40).state) {
              if (!id(sensor20).state) {
                 return {"OK"};
              }
              else {return {"FALHA"};}
            }
            else {return {"FALHA"};}
          }
          else {return {"FALHA"};}
        }
        else {
          if (!id(sensor60).state) {
            if (!id(sensor40).state) {
              if (!id(sensor20).state) {
                 return {"OK"};
              }
              else {return {"FALHA"};}
            }
            else {return {"FALHA"};}
          }
          else {
            if (!id(sensor40).state) {
              if (!id(sensor20).state) {
                 return {"OK"};
              }
              else {return {"FALHA"};}
            }
            else {return {"OK"};}
          }  
        }
      }
    on_value:
      - if:
          condition:
            text_sensor.state:
              id: falha_sensor
              state: "FALHA"
          then:
            - light.turn_on: nivel_erro
            - switch.turn_off: rele10a
            - logger.log: 
                format: "ATENÇÃO!! FALHA NOS SENSORES"
                level: WARN

          else:
            - light.turn_off: nivel_erro

  - platform: template
    name: "Sensor 1 - 20%"
    id: sensor1
    update_interval: 2s
    lambda: |-
      if (!id(sensor20).state) {
        return {"ON"};
      }
      else { 
        return {"OFF"};
      }

  - platform: template
    name: "Sensor 2 - 40%"
    id: sensor2
    update_interval: 2s
    lambda: |-
      if (!id(sensor40).state) {
        return {"ON"};
      }
      else { 
        return {"OFF"};
      }

  - platform: template
    name: "Sensor 3 - 60%"
    id: sensor3
    update_interval: 2s
    lambda: |-
      if (!id(sensor60).state) {
        return {"ON"};
      }
      else { 
        return {"OFF"};
      }

  - platform: template
    name: "Sensor 4 - 80%"
    id: sensor4
    update_interval: 2s
    lambda: |-
      if (!id(sensor80).state) {
        return {"ON"};
      }
      else { 
        return {"OFF"};
      }

  - platform: template
    name: "Sensor 5 - 100%"
    id: sensor5
    update_interval: 2s
    lambda: |-
      if (!id(sensor100).state) {
        return {"ON"};
      }
      else { 
        return {"OFF"};
      }

sensor:
  - platform: uptime
    id: uptime_s
    name: "[ Uptime Sec"
    unit_of_measurement: "Sec"
    disabled_by_default: true
    update_interval: 15s
    internal: True

  - platform: wifi_signal # Mostra o sinal WiFi em db
    id: wifi_signal_db
    name: "[ Sinal WiFi dB:"
    icon: mdi:wifi-strength-1
    update_interval: 60s

  - platform: copy # Mostra o sinal WiFi em %
    id: wifi_signal_perc
    name: "[ Sinal WiFi %"
    icon: mdi:wifi-strength-1
    source_id: wifi_signal_db
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    on_value:
      then:
       - logger.log: 
          format: "Sinal WiFi: %.1f %%"
          args: ['id(wifi_signal_perc).state']
          level: INFO

  - platform: template
    id: nivel_agua 
    name: "Nivel da Caixa "
    update_interval: 2s    
    icon: "mdi:water"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: |-
      if (!id(sensor100).state) {
        return 100;
      }
      if (!id(sensor80).state) {
        return 80;
      }
      if (!id(sensor60).state) {
        return 60;
      }
      if (!id(sensor40).state) {
        return 40;
      }
      if (!id(sensor20).state) {
        return 20; 
      } 
      else { 
        return 0;
      }
    on_value:
      then:
        - lambda: |- 
            auto opcao = id(rele_on).active_index();
            if ( x /20 == opcao.value() ) {
               id(rele10a).turn_on();
               }
               else {
                 auto opcao = id(rele_off).active_index();
                 if ( x / 20 == opcao.value() ) {
                 id(rele10a).turn_off();
                 }
               }

button:
  - platform: restart
    name: "▓ Reiniciar ▓"

  - platform: factory_reset
    name: "▓ Reset de Fábrica ▓"
    id: Reset

#  - platform: safe_mode
#    name: "▓ Safe Mode ▓"
#    internal: false
